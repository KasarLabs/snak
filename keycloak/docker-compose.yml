volumes:
  kc_postgres_data: {}

networks:
  snaknet:
    driver: bridge
  kcnet:
    driver: bridge
  edge:
    driver: bridge

services:

  traefik:
    image: traefik:v3.1
    container_name: traefik
    restart: always
    command:
      - --entrypoints.websecure.address=:443
      - --providers.file.directory=/etc/traefik/dynamic
      - --api.dashboard=true
    ports:
      - "443:443"
      - "8081:8080" # dashboard
    volumes:
      - ./traefik/dynamic.yml:/etc/traefik/dynamic/dynamic.yml:ro
      - ./traefik/certs:/certs:ro
    networks: [edge, snaknet]

  kc_postgres:
    image: postgres:15
    container_name: kc_postgres
    restart: always
    env_file:
      - .env.keycloak
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kc_postgres -d kc_postgres"]
      interval: 5s
      timeout: 3s
      retries: 30
    volumes:
      - kc_postgres_data:/var/lib/postgresql/data
    networks: [kcnet]

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.2
    container_name: keycloak
    command: ["start", "--import-realm"]
    restart: always
    depends_on:
      kc_postgres:
        condition: service_healthy
    volumes:
      - ./realm.json:/opt/keycloak/data/import/realm.json:ro
    env_file:
      - .env.keycloak
    networks: [kcnet, edge, snaknet]
    ports: 
      - "8080:8080"
      - "9000:9000"

  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
    container_name: oauth2_proxy
    restart: always
    depends_on:
      - keycloak
    env_file:
      - .env.keycloak
    networks: [edge, snaknet]
    ports: 
      - "4180:4180"
      - "44180:44180"
  
  dummy-frontend:
    build:
      context: ./dummy-frontend
    container_name: dummy-frontend
    networks: [edge]

